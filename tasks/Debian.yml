---
# tasks file for hoplacloud.wordpress

- name: Ensure root password is allowed in SSH
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#PermitRootLogin'
    line: "PermitRootLogin yes"

- name: restart service ssh
  systemd:
    state: restarted
    name: ssh

- name: Init vars
  set_fact:
    wp_password: "{{ lookup('password', '/dev/null length=8 chars=ascii_letters,digits,hexdigits') }}"
    db_password: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters,digits,hexdigits') }}"
    db_root_password: "{{ lookup('password', '/dev/null length=16 chars=ascii_letters,digits,hexdigits') }}"
    vhost_user: "{{ vhost_url | regex_replace('\\.') | truncate(13, True, '') }}"
    vhost_password: "{{ lookup('password', '/dev/null length=12 chars=ascii_letters,digits,hexdigits') }}"
    vhost_domain: "{{ vhost_url | regex_replace('([^\\.]*)\\.(.+)$', '\\2') }}"
    vhost_sdomain: "{{ vhost_url | regex_replace('([^\\.]*)\\.(.+)$', '\\1') }}"

- name: Create compose directory
  file:
    path: /root/compose/wordpress
    state: directory

- name: Create compose apache2 directory
  file:
    path: /root/compose/wordpress/apache2
    state: directory

- name: Create compose wordpress directory
  file:
    path: /root/compose/wordpress/wordpress
    state: directory

- name: Create container directory
  file:
    path: /var/container
    state: directory

- name: Create container directory
  file:
    path: /var/container/wordpress
    state: directory

- name: Create container directory
  file:
    path: /var/container/wordpress/etc
    state: directory

- name: Create container directory
  file:
    path: /var/container/wordpress/etc/apache2
    state: directory

- name: Create container directory
  file:
    path: /var/container/wordpress/etc/apache2/conf
    state: directory

- name: Create container directory
  file:
    path: /var/container/wordpress/etc/traefik
    state: directory

- name: Copy Dockerfile for apache2
  copy:
    src: Dockerfile_apache2.yml
    dest: /root/compose/wordpress/apache2/Dockerfile

- name: Create container directory
  file:
    path: /var/container/wordpress/etc/wordpress
    state: directory

- name: Create container directory
  file:
    path: /var/container/wordpress/etc/php
    state: directory

- name: Copy Dockerfile for wordpress
  copy:
    src: Dockerfile_wordpress.yml
    dest: /root/compose/wordpress/wordpress/Dockerfile

- name: Copy script for wordpress
  copy:
    src: wordpress/host-int.sh
    dest: /root/compose/wordpress/wordpress/host-int.sh

- name: Create docker-compose file
  template:
    src: docker-compose.j2
    dest: /root/compose/wordpress/docker-compose.yml

- name: Copy config for apache2
  copy:
    src: apache2/php-fpm.conf
    dest: /var/container/wordpress/etc/apache2/conf/php-fpm.conf

- name: Create traefik config file
  template:
    src: traefik.j2
    dest: /var/container/wordpress/etc/traefik/traefik.toml

- name: Create php config file
  template:
    src: php.ini.j2
    dest: /var/container/wordpress/etc/php/php.ini

- name: Create traefik acme file
  file:
    path: /var/container/wordpress/etc/traefik/acme.json
    state: touch
    mode: '600'

- name: Create ftp log directory
  file:
    path: /var/container/wordpress/log/vsftpd
    state: directory

- name: Create ftp logs file
  file:
    path: /var/container/wordpress/log/vsftpd/vsftpd.log
    state: touch

- name: Run docker compose
  docker_compose:
    project_name: wordpress
    project_src: /root/compose/wordpress

- name: Create domain_test.sh
  template:
    src: domain_test.j2
    dest: /root/domain_test.sh

- name: Touch domain.invalid file
  file:
    path: /etc/domain.invalid
    state: touch

- name: Ensure a cron task exist
  cron:
    name: "DNS TEST"
    minute: "*/5"
    job: "test -a /etc/domain.invalid && /root/domain_test.sh > /dev/null"

- name: Log variables to file
  template:
    src: logs.j2
    dest: /root/Oneclick-wp-{{ ansible_date_time.date }}-{{ ansible_date_time.time }}.txt
    owner: root
    group: root

- name: Sending end of provisionning Email to user
  mail:
    host: localhost
    port: 25
    to: "{{ user_email }}"
    subject: "Hopla üëè Votre {{ app_name }} vous attend sur hopla.cloud !"
    subtype: "html"
    secure: "never"
    body: "{{ lookup('template', 'mail.j2') }}"
